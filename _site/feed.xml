<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aashish</title>
    <description>Attempt to jot down my thoughts</description>
    <link>https://akarki15.github.io/blog</link>
    <atom:link href="https://akarki15.github.io/blogfeed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 01 Jul 2016 01:04:05 -0400</pubDate>
    <lastBuildDate>Fri, 01 Jul 2016 01:04:05 -0400</lastBuildDate>
    <generator>Jekyll v2.5.1</generator>
    
      <item>
        <title>Method,  interface and pointers in golang</title>
        <description>&lt;ul&gt;
  &lt;li&gt;If a method is defined on a pointer to struct, the method can be called on a pointer to the struct type. In the example below, calling &lt;code&gt;ptr_s1.hello()&lt;/code&gt; is fine since method &lt;code&gt;hello()&lt;/code&gt; is defined on &lt;code&gt;*struct1&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://play.golang.org/p/sef4NPbNmR&quot;&gt;go play link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;struct1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;struct1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;ptr_s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;struct1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ptr_s1 is of type : %+T\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ptr_s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// *main.struct1&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ptr_s1.greeting: %+v\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ptr_s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;amp;{greeting:}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;ptr_s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ptr_s1.greeting: %+v\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ptr_s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;amp;{greeting:hello}&lt;/span&gt;
	
	&lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;struct1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s1 is of type : %+T\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// main.struct1&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s1.greeting: %+v\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// {greeting:}&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s1.greeting: %+v\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// {greeting:hello}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;However, method &lt;code&gt;hello()&lt;/code&gt; is also callable on non pointer type &lt;code&gt;s1&lt;/code&gt;. In fact, &lt;code&gt;struct1.greeting&lt;/code&gt; gets populated with &lt;code&gt;hello&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 07 Jul 2016 00:00:00 -0400</pubDate>
        <link>https://akarki15.github.io/go,/golang/2016/07/07/go-pointers-method.html</link>
        <guid isPermaLink="true">https://akarki15.github.io/blog/go,/golang/2016/07/07/go-pointers-method.html</guid>
        
        
        <category>go,</category>
        
        <category>golang</category>
        
      </item>
    
      <item>
        <title>Why do we like reading old books?</title>
        <description>&lt;p&gt;There is a strange timelessness in reading an old book because it is a physical piece of history. A book carries stories about not only the protagonists and antagonists but also about the countless readers who read the book. In a way, the readers themselves become part of the “plot” that the book carries with it.&lt;/p&gt;

&lt;p&gt;The crease at the end of the chapters add another layer of history to the original plot. Holding an old book is almost like meeting grandma as a kid. She is sweet and innocent like kids; she has the same childishness, and carefreeness as we once did as kids. But contrasting to her demeanour is her body - it is covered with stretched and wrinkled skin; it bears witness to the countless lives and stories it was once part of. Similar to our grandma, an old book, too, bears witness to the countless lives it has been part of. The spice-stained pages, the tear wrinkled edges and the sun-dried fluffy pages bear witness to both important and frivolous events of a life that has passed. The person who lived that life may be alive or long dead but his remnants continue to live and be part of other reader’s lives through books. If the person is alive, does he ever think about these spice-smeared pages? Does he remember how his tears shriveled these edges? Or has he forgotten these pages and also the events that caused the deformation? &lt;/p&gt;

&lt;p&gt;Sometimes I recur these ideas on myself. Have I forgotten important events of my life? Have the remnants of those events been part of someone else’s life or have they all vanished? Will I live in people’s mind as a single person or will I disintegrate into little unidentifiable cues in old shabby books?&lt;/p&gt;
</description>
        <pubDate>Thu, 23 Jul 2015 00:00:00 -0400</pubDate>
        <link>https://akarki15.github.io/books/2015/07/23/oldbooks.html</link>
        <guid isPermaLink="true">https://akarki15.github.io/blog/books/2015/07/23/oldbooks.html</guid>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Notes from javascript the good parts</title>
        <description>&lt;ul&gt;
  &lt;li&gt;In JavaScript, arrays are objects, functions are objects, regular expressions are objects, and, of course, objects are objects.&lt;/li&gt;
  &lt;li&gt;An object is a container of properties, where a property has a name and a value. A property name can be any string, including the empty string.&lt;/li&gt;
  &lt;li&gt;An object literal is a pair of curly braces surrounding zero or more name/value pairs&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;empty_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stooge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;first-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Jerome&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;last-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Howard&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Objects in JavaScript are class-free&lt;/li&gt;
  &lt;li&gt;The || operator can be used to fill in default values:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stooge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;middle-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;(none)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;unknown&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Objects are passed around by reference. They are never copied:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stooge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Curly&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stooge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// nick is &amp;#39;Curly&amp;#39; because x and stooge&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// are references to the same object&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a, b, and c each refer to a&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// different empty object&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a, b, and c all refer to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the same empty object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Every object is linked to a prototype object from which it can inherit properties. All objects created from object literals are linked to Object.prototype, an object that comes standard with JavaScript.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Functions in JavaScript are objects. Objects are collections of name/value pairs having a hidden link to a prototype object. Objects produced from object literals are linked to Object.prototype. Function objects are linked to Function.prototype (which is itself linked to Object.prototype). &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Function objects are created with function literals:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Create a variable called add and store a function&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// in it that adds two numbers.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Function name is optional. When it doesn’t have a name, it is called an “anonymous function”. Above example is an anoymous function; it is just assigned to a variable but it doesn’t have a name. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JS Variable Scope example: &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Source: http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// If you don&amp;#39;t declare your local variables with the var keyword, they are part of the global scope​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Michael Jackson&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showCelebrityName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showOrdinaryPersonName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
	&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Johnny Evers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;showCelebrityName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Michael Jackson​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// name is not a local variable, it simply changes the global name variable​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;showOrdinaryPersonName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Johnny Evers​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// The global variable is now Johnny Evers, not the celebrity name anymore​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;showCelebrityName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Johnny Evers​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// The solution is to declare your local variable with the var keyword​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showOrdinaryPersonName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Johnny Evers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Now name is always a local variable and it will not overwrite the global variable​&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Curly brackets don’t start a new scope. Prettty bad if you ask me (having come from Java background).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// outputs 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;​&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// The variable i is a global variable and it is accessible in the following function with the last value it was assigned above ​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// The variable i in the aNumber function below is the global variable i that was changed in the for loop above. Its last value was 11, set just before the for loop exited:​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;aNumber&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 11​&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Variable Hoisting: Variable &lt;em&gt;declarations&lt;/em&gt; are hoisted to the top of the scope (could be local/functional or global). Example: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;First Name: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ford&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Last Name: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// First Name: undefined​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Last Name: Ford​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// The reason undefined prints first is because the local variable name was hoisted to the top of the function​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Which means it is this local variable that get calls the first time.​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// This is how the code is actually processed by the JavaScript engine:​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;showName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// name is hoisted (note that is undefined at this point, since the assignment happens below)​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;First Name: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// First Name: undefined​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Ford&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// name is assigned a value​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// now name is Ford​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Last Name: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Last Name: Ford​&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Function Declaration Overrides Variable Declaration When Hoisted&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Both function declaration and variable declarations are hoisted to the top of the containing scope. And function declaration takes precedence over variable declarations (but not over variable assignment). As is noted above, variable assignment is not hoisted, and neither is function assignment. As a reminder, this is a function assignment: var myFunction = function () {}.
Here is a basic example to demonstrate:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Both the variable and the function are named myName​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Rich&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// The function declaration overrides the variable name​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// function&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// But in this example, the variable assignment overrides the function declaration​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Richard&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This is the variable assignment (initialization) that overrides the function declaration.​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Rich&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// string&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;It is important to note that function expressions, such as the example below, are not hoisted.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Rich&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;In strict mode, an error will occur if you assign a variable a value without first declaring the variable. Always declare your variables.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 03 Jun 2015 00:00:00 -0400</pubDate>
        <link>https://akarki15.github.io/javascript/good/parts/2015/06/03/Javascript's%20good%20parts.html</link>
        <guid isPermaLink="true">https://akarki15.github.io/blog/javascript/good/parts/2015/06/03/Javascript's%20good%20parts.html</guid>
        
        
        <category>javascript</category>
        
        <category>good</category>
        
        <category>parts</category>
        
      </item>
    
      <item>
        <title>Unix crashcourse</title>
        <description>&lt;p&gt;Following is a list of basic shell commands for Unix:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ls&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ls -l&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Outputs &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;drwxr-x---   &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; akarki15 akarki15       &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; Jun  &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2011&lt;/span&gt; bin
-rw-r-----   &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; akarki15 akarki15 &lt;span class=&quot;m&quot;&gt;4194304&lt;/span&gt; Apr &lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt; block-device.data
drwxrwxr-x  &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; akarki15 akarki15    &lt;span class=&quot;m&quot;&gt;4096&lt;/span&gt; Feb &lt;span class=&quot;m&quot;&gt;28&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt; cs111
drwxr-x---  &lt;span class=&quot;m&quot;&gt;19&lt;/span&gt; akarki15 akarki15    &lt;span class=&quot;m&quot;&gt;4096&lt;/span&gt; May &lt;span class=&quot;m&quot;&gt;28&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt; cs112
drwxr-x---   &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt; akarki15 akarki15     &lt;span class=&quot;m&quot;&gt;147&lt;/span&gt; May &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt; cs-261
drwxr-x---   &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; akarki15 akarki15      &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt; May  &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;2013&lt;/span&gt; CS281&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;First column of the output is showing access rights
    &lt;ol&gt;
      &lt;li&gt;rwx: read, write, executable&lt;/li&gt;
      &lt;li&gt;Three sets of them for user, others in the group, and everyone&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How do you change the access settings?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;chmod u+w&lt;/code&gt; will give &lt;em&gt;write&lt;/em&gt; rights to &lt;em&gt;users&lt;/em&gt; in the group&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;chmod o+x&lt;/code&gt; will give &lt;em&gt;executable&lt;/em&gt; rights to &lt;em&gt;others&lt;/em&gt; in the group&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;chmod a-r&lt;/code&gt; will take away &lt;em&gt;read&lt;/em&gt; rights from &lt;em&gt;all&lt;/em&gt; in the group&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some switches for ls&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Command&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;ls -a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;shows “all” files&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;ls -d a*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Wildcard to display all files whose filename begins with a&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;ls -d [i-l]*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;[i-l] is a set containing letters i through l&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Cool things you can do with dot dot (..) and tilde (~)&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.. represents the parent director. So say you are in &lt;code&gt;/home/aashish&lt;/code&gt; and &lt;code&gt;/home&lt;/code&gt; has another file called &lt;code&gt;a.java&lt;/code&gt;. You can access it from aashish by saying &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cat ../a.java&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;~/&lt;/code&gt; refers to the user home directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Using History&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;history&lt;/code&gt; shows list of previous shell commands used. It gave following output on my computer: &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;m&quot;&gt;5673&lt;/span&gt;  ssh -Y akarki15@romulus.amherst.edu
 &lt;span class=&quot;m&quot;&gt;5674&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Desktop/jam/blog/
 &lt;span class=&quot;m&quot;&gt;5675&lt;/span&gt;  jekyll build
 &lt;span class=&quot;m&quot;&gt;5676&lt;/span&gt;  jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Run a certain numbered command by &lt;code&gt;!&amp;lt;number of the command&amp;gt;&lt;/code&gt;. For exmaple &lt;code&gt;!5676&lt;/code&gt; will run &lt;code&gt;jekyll serve&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;.cshrc file&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;~/.cshrc&lt;/code&gt; contains shell configuration &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; contains paths for programs you run on terminal. E.g. more, less etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Random cool monitors&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;top&lt;/code&gt; shows the running processes on the system&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;vmstat 5&lt;/code&gt; shows the paging history, 5 denotes how fast the list is being refreshed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;ps uax&lt;/code&gt; shows the processes running right now &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;All about that stream&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Three I/O streams of unix (Similar to what it is in Java)
    &lt;ul&gt;
      &lt;li&gt;Say you have a java executable called prog.class&lt;/li&gt;
      &lt;li&gt;stdin 
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;java prog &amp;lt; inputFile&lt;/code&gt; will use &lt;code&gt;inputFile&lt;/code&gt; for keyboardinput expected by stdin in java. &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;stdout		
        &lt;ul&gt;
          &lt;li&gt;&lt;code&gt;java prog &amp;gt; outfile&lt;/code&gt; writes whatever &lt;code&gt;System.out.println(&quot;&quot;)&lt;/code&gt; into the &lt;code&gt;outfile&lt;/code&gt; 		
            &lt;ul&gt;
              &lt;li&gt;Note that &lt;code&gt;System.err.println(&quot;&quot;)&lt;/code&gt; is written on the screen instead of file&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;code&gt;java prog &amp;gt;&amp;amp; oufile&lt;/code&gt; will write both stdout and stderr into &lt;code&gt;outfile&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;java prog &amp;gt; /dev/tty) &amp;gt;&amp;amp; /path&lt;/code&gt; will write stdout to &lt;code&gt;/dev/tty&lt;/code&gt; and stderr to &lt;code&gt;/path&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code&gt;prog &amp;gt;&amp;gt; outfile&lt;/code&gt; appendas to the &lt;code&gt;outfile&lt;/code&gt; instead of overwriting it &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pipe command&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Feeds the output of one command to another (prog1 to prog2). e.g. &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;prog1 &amp;lt; file1 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; prog2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Suspend/resume jobs aka COOL STUFF&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;ctrl+z&lt;/code&gt; suspends/pauses the running job&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;bg&lt;/code&gt; puts a job to background&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;jobs&lt;/code&gt; prints the list of jobs&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;fg %1&lt;/code&gt; bring job no. 1 from background to foreground  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;grep&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;grep &#39;word&#39; filename&lt;/code&gt; searches for word in file called filename&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;grep --color &#39;data&#39; fileName&lt;/code&gt; display grep results in color &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;grep &#39;word&#39; file1 file2 file3&lt;/code&gt; searches for word in file1, file2 and file3&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;grep &#39;string1 string2&#39;  filename&lt;/code&gt; searches for string1, string2 in filename&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cat otherfile | grep &#39;something&#39;&lt;/code&gt; pipe grep result and display its (their) contents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tar Tricks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;tar cf Simplex.tar Simplex&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;c&lt;/code&gt;reate a &lt;code&gt;f&lt;/code&gt;ile &lt;code&gt;Simplex.tar&lt;/code&gt; from &lt;code&gt;Simplex&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;mkdir newDir ; cd newDir ; tar xf ../Simplex.tar&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Creates &lt;code&gt;newDir&lt;/code&gt; and extracts &lt;code&gt;Simplex&lt;/code&gt; into &lt;code&gt;newDir&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Loop: &lt;code&gt;basename&lt;/code&gt; parses out from every &lt;code&gt;$i&lt;/code&gt; just its filename. The loop creates a copy of every file but changes the extension to &lt;code&gt;.save&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;foreach i &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;*.txt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	foreach? cp &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;basename &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; .txt&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.save
	foreach? end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 01 Apr 2015 00:00:00 -0400</pubDate>
        <link>https://akarki15.github.io/unix/shell/shellpower/2015/04/01/unix-crash-course.html</link>
        <guid isPermaLink="true">https://akarki15.github.io/blog/unix/shell/shellpower/2015/04/01/unix-crash-course.html</guid>
        
        
        <category>unix</category>
        
        <category>shell</category>
        
        <category>shellpower</category>
        
      </item>
    
      <item>
        <title>Why does it hurt when someone dies?</title>
        <description>&lt;p&gt;I received a call from my sister today who told me that our beloved pet dog “kaale” died today. For a dog, she lived a long life - she was 15 years old this year. I was grieved by the news although I had been in preparing myself to bear the inevitable news of her (Kaale) since returning from my trip to Nepal. She looked frail and thin, ate very little and didn’t move around much. I shudder even now thinking how &lt;em&gt;thin&lt;/em&gt; she had gotten- I could feel her spine sticking out of her back and her ribs protruding out of her belly. &lt;/p&gt;

&lt;p&gt;I tried to console my sister who was on tears over the phone. I found it meaningful to talk about how important role Kaale had played in our lives- especially in our childhood. She had been with us, and around us throughout as we were growing up. My sister brought Kaale in the little metallic basket of her newly purchased ladybird bike while she was in her 4th grade. She brought her all the way from the bazaar, from our aunt’s big 4-storied house. I can’t remember how young kaale was at that time, but I am fairly confident that she was under a month old. I think my mom was surprised that kaale didn’t die during that bike trip considering the ladybird bike did not have any suspension whatsoever and my sister had to travel around 500 meters of graveled road along the way. I still remember playing with kaale in the front porch- as I fluttered a piece of cloth and ran around with it in the front porch and the verendah, kaale would chase it and try to bite it. I vividly recollect teaching her how to stand on her hind legs and do a “namaste”. Although her face would twitch a little indicating the discomfort she was having, she would silently obey me. I was a proud elder brother who had taught kaale a trick. I also remember that one time during my 8th grade when my sister and I called the local radio station and told the hosts that we wanted to wish Kaale her 4th birthday. We thought it was ingenious and extremely hilarious. I think we have a recording of that broadcast somewhere in our old PC/phone. &lt;/p&gt;

&lt;p&gt;As I was recollecting the memory of Kaale with my sister, I realized that it is the memory of the dead that haunts us. Our loved ones embody the times we’ve had together- kaale embodied our childhood, our innocence, our glee and our mischievousness. Last winter when I was with Kaale, I did not see the crooked old body, breaking apart like the rusted 15-year old ladybird on the roof of our house- battered by the rain, the heat and the wind of sub-tropical hill. Instead, I saw the memories we’d created, and the times we’d shared. As I saw Kaale basking in the sun last winter, looking coldly and almost angrily at the jumping little dog (we had recently got another dog), I remembered W.B. Yeat’s poem. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;THE LAMENTATION OF THE OLD PENSIONER&lt;/p&gt;

  &lt;p&gt;Although I shelter from the rain
Under a broken tree
My chair was nearest to the fire
In every company
That talked of love or politics,
Ere Time transfigured me.&lt;/p&gt;

  &lt;p&gt;Though lads are making pikes again
For some conspiracy,
And crazy rascals rage their fill
At human tyranny,
My contemplations are of Time
That has transfigured me.&lt;/p&gt;

  &lt;p&gt;There’s not a woman turns her face
Upon a broken tree,
And yet the beauties that I loved
Are in my memory;
I spit into the face of Time
That has transfigured me&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And when I heard that Kaale died, I felt that a part of my childhood had died- I felt little pigeonhole that is Kaale through which I could cherish my memories was closed. Although I can’t imagine Kaale’s suffering while she was dying, I was kind of glad that she was ridden of the bitterness that had filled her life- how time had transfigured her. She who used to be more agile, more talented than that little prick (the dog) who constantly teases her, was now rendered so ugly and helpless by time. In a way, my own childhood and my memories were being mocked by that little prick. I am glad that Kaale does not have to endure the bitterness and the pain of old age anymore. But at the same time, my heart is utterly broken because with Kaale, a part of my childhood just died. &lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2015 00:00:00 -0400</pubDate>
        <link>https://akarki15.github.io/death,/contemplation/2015/03/30/death.html</link>
        <guid isPermaLink="true">https://akarki15.github.io/blog/death,/contemplation/2015/03/30/death.html</guid>
        
        
        <category>death,</category>
        
        <category>contemplation</category>
        
      </item>
    
  </channel>
</rss>